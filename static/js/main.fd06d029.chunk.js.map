{"version":3,"sources":["components/navigation_bar.js","components/movie_input.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","props","Navbar","bg","expand","className","Brand","href","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","MovieInput","React","useState","movieName","onMovieNameChange","numberPeople","onNumberPeopleChange","open","setOpen","recommended_movies","onRecommendedMoviesChange","handleClose","loadingopen","setLoadingOpen","handleLoadingClose","data","require","movies","movies_recommended_list","map","name_of_movie","Typography","sx","mt","i","length","push","title","filterOptions","createFilterOptions","matchFrom","limit","Fragment","Modal","onClose","Box","textAlign","id","variant","component","Button","color","onClick","CircularProgress","pl","Grid","container","item","xs","pt","Autocomplete","disablePortal","onChange","event","value","options","renderInput","params","TextField","label","target","justifyContent","alert","string_to_pass","String","axios","get","then","response","console","log","movies_seen","catch","respons","finally","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd06d029.chunk.js","sourcesContent":["import React from 'react'\nimport {Navbar} from 'react-bootstrap'\n\nfunction NavigationBar(props){\n    return(\n        <Navbar bg=\"light\" expand=\"lg\" className=\"justify-content-center\">\n            <Navbar.Brand href=\"/\">What to watch tonight !</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default NavigationBar","import React from 'react'\nimport {Autocomplete, TextField, Typography, Grid, Button, Box, createFilterOptions, Modal, CircularProgress} from '@mui/material'\nimport axios from 'axios'\nimport {ArrowRight} from 'react-bootstrap-icons'\n\nconst style = {\n    position: 'absolute',\n    top: '40%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '80%',\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\nfunction MovieInput(props){\n    const [movieName, onMovieNameChange] = React.useState(\"\")\n    const [numberPeople,onNumberPeopleChange] = React.useState(100)\n    const [open, setOpen] = React.useState(false);\n    const [recommended_movies,onRecommendedMoviesChange] = React.useState([])\n    const handleOpen = () => setOpen(true)\n    const handleClose = () => setOpen(false)\n\n    const [loadingopen, setLoadingOpen] = React.useState(false)\n    const handleLoadingOpen = () => setLoadingOpen(true)\n    const handleLoadingClose = () => setLoadingOpen(false)\n\n    const data = require('../movies_name/movies.json');\n    const movies = []\n\n    const movies_recommended_list = recommended_movies.map(\n        (name_of_movie) => \n            <Typography sx={{ mt: 2 }}><ArrowRight/> {name_of_movie}</Typography>\n        )\n\n    for (let i = 0; i < data.length; i++) {\n        movies.push(data[i].title)\n    }\n    const filterOptions = createFilterOptions({\n        matchFrom: 'any',\n        limit: 500,\n    });\n    return (\n        <React.Fragment>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n                >\n                <Box sx={style}>\n                    <Box style={{textAlign:'center'}}>\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                            Recommended Movies\n                        </Typography>\n                    </Box>       \n                    <Box p={2} />    \n                    <Typography id=\"modal-modal-title\">\n                        If you watched {movieName}, you might like:\n                    </Typography>       \n                    {movies_recommended_list}\n                    <Box p={2} />\n                    <Box style={{textAlign:'center'}}>\n                        <Button variant=\"outlined\" color=\"error\" onClick={handleClose}>Close</Button>\n                    </Box>\n                </Box>\n            </Modal>\n\n            <Modal\n                open={loadingopen}\n                onClose={handleLoadingClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n                >\n                <Box sx={style}>\n                    <Box style={{textAlign:'center'}}>\n                        <Typography >Loading</Typography>\n                        <CircularProgress/>\n                    </Box>\n                </Box>\n            </Modal>\n\n            <Box mt={8} pl={2}>\n                <Grid container>\n                    <Grid item xs={6}>\n                        <Typography pt={2}>Which movie did you watch recently?</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Autocomplete\n                        filterOptions={filterOptions}\n                        disablePortal\n                        onChange={\n                            (event,value)=>{\n                                onMovieNameChange(value)\n                            }\n                        }\n                        id=\"combo-box-demo\"\n                        options={movies}\n                        sx={{ width: 300 }}\n                        renderInput={(params) => <TextField {...params} value={movieName} label=\"Movie name\" />}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Box sx={{ p: 1 }}/>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Typography pt={2}>How many ratings do you want to consider?</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField onChange={(event)=>{\n                            onNumberPeopleChange(event.target.value)\n                        }} value={numberPeople} label=\"Number\" />\n                    </Grid>\n\n                    <Grid container justifyContent=\"center\" pt={4}>\n                        <Button onClick={()=>{\n                            // Checking for the data types entered     \n                            if(movieName === \"\" || numberPeople <= 0){\n                                alert(\"There is a data verification error. \\nPlease check the input fields again!\")\n                            }else{\n                                handleLoadingOpen()\n                                var string_to_pass = \"http://127.0.0.1:5000/recommend/\"+ String(movieName) + \"/\" + String(numberPeople)\n                                axios.get(string_to_pass).then(\n                                    response=>{\n                                        console.log(\"The response is: \")\n                                        console.log(response.data)\n                                        var movies_seen = response.data\n                                        onRecommendedMoviesChange(movies_seen)\n                                        handleOpen()\n                                    }\n                                ).catch(\n                                    respons=>{\n                                        console.log(respons)\n                                    }\n                                ).finally(()=>{\n                                    handleLoadingClose()\n                                })\n                            }\n                        }} variant=\"outlined\" color=\"success\">Sumbit</Button>\n                    </Grid>\n                </Grid> \n            </Box>\n        </React.Fragment>\n    )\n}\n\n\n\nexport default MovieInput","import React from 'react'\nimport NavigationBar from './components/navigation_bar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MovieInput from './components/movie_input';\nimport '@fontsource/roboto/300.css'\nimport '@fontsource/roboto/400.css'\nimport '@fontsource/roboto/500.css'\nimport '@fontsource/roboto/700.css'\nimport {Container, Box} from '@mui/material'\n\nfunction App() {\n  return (\n    <Box pt={20}>\n      <Container maxWidth={'md'}>\n        <NavigationBar/>\n        <MovieInput/>\n      </Container>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}